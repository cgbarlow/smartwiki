// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles    Article[]
  comments    Comment[]
  auditLogs   AuditLog[]
  preferences UserPreference?

  @@map("users")
}

model Article {
  id          String        @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  slug        String        @unique
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    String
  categoryId  String?

  // Relations
  author     User      @relation(fields: [authorId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  comments   Comment[]
  tags       Tag[]
  auditLogs  AuditLog[]
  compliance ComplianceStatus[]

  @@map("articles")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articles Article[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles Article[]

  @@map("tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  articleId String

  // Relations
  author  User    @relation(fields: [authorId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@map("comments")
}

model AuditLog {
  id        String     @id @default(cuid())
  action    AuditAction
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  createdAt DateTime   @default(now())
  userId    String?
  articleId String?

  // Relations
  user    User?    @relation(fields: [userId], references: [id])
  article Article? @relation(fields: [articleId], references: [id])

  @@map("audit_logs")
}

model ComplianceStatus {
  id          String           @id @default(cuid())
  articleId   String
  regulation  String
  status      ComplianceState  @default(PENDING)
  checkedAt   DateTime?
  checkedBy   String?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  article Article @relation(fields: [articleId], references: [id])

  @@map("compliance_status")
}

model UserPreference {
  id             String  @id @default(cuid())
  userId         String  @unique
  theme          String  @default("light")
  language       String  @default("en")
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("user_preferences")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
}

enum ComplianceState {
  PENDING
  COMPLIANT
  NON_COMPLIANT
  NEEDS_REVIEW
}